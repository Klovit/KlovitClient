---
import config from '../../config';

import db from '../../database';
import Footer from '../../components/footer.astro';
import PackagesForm from '@/components/installer/PackagesForm';
import ErrorAlert from '@/components/ErrorAlert';
import { NavigationMenu } from '@/components/ui/navigation-menu';
import NavigationMenuComponent from '@/components/installer/NavigationMenu';
const { cookies, redirect } = Astro;

const installed = await db.get("installed")

if (installed === true) {
    return Astro.redirect(`/?error=KlovitClient is already installed.`)
}

const inputstarttoken = Astro.url.searchParams.get('token')! || '';
const starttoken = await db.get("starttoken")
if (inputstarttoken != starttoken) {
    return Astro.redirect("/installer/start?error=Invalid Token")
}
const error = Astro.url.searchParams.get('error')! || '';

const year = new Date().getFullYear().toString()
const yearWithTitle = `${year} KlovitClient`

---
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <meta name="description" content=`KlovitClient installer`>
        <meta name="keywords" content=`KlovitClient, Hosting, Klovit, Freemium Minecraft Hosting, Installer, Cloud, Minecraft, Servers, Free Servers, Hostings that use KlovitClient`>
        <meta name="author" content=`Klovit`>
        <meta name="copyright" content=`KlovitClient`>
        <meta property="og:type" content=`website`>
        <meta property="og:title" content=`KlovitClient`>
        <meta property="og:description" content=`KlovitClient installer`>
        <meta property="og:image" content=`https://docs.klovit.tech/img/Klovit%20Logo.png`>
        <meta name="twitter:card" content=`https://docs.klovit.tech/img/Klovit%20Logo.png`>
        <meta name="twitter:title" content=`KlovitClient`>
        <meta name="twitter:description" content=`KlovitClient installer`>
        <meta name="twitter:image" content=`https://docs.klovit.tech/img/Klovit%20Logo.png`>
        <meta name="twitter:image:src" content=`https://docs.klovit.tech/img/Klovit%20Logo.png`>
        <title>KlovitClient | Step 2</title>
      
        <script src="https://cdn.tailwindcss.com"></script>
        <link href=https://docs.klovit.tech/img/Klovit%20Logo.png rel="icon">
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
        <script src="https://kit.fontawesome.com/cf4342c927.js" crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.8.1/flowbite.min.js"></script>
      </head>

      
      
      <body class="h-full min-h-screen relative">
          <div class="hidden md:block animation-blob h-screen w-screen">
              <div class="antialiased">
                  <main class="h-full">
                        <NavigationMenuComponent client:load />
                         <script is:inline>
      
                          // On page load or when changing themes, best to add inline in `head` to avoid FOUC
                          if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                              document.documentElement.classList.add('dark');
                          } else {
                              document.documentElement.classList.remove('dark')
                          }
                          var themeToggleDarkIconb = document.getElementById('theme-toggle-dark-iconb');
                          var themeToggleLightIconb = document.getElementById('theme-toggle-light-iconb');
                        
                          // Change the icons inside the button based on previous settings
                          if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                              themeToggleLightIconb.classList.remove('hidden');
                          } else {
                              themeToggleDarkIconb.classList.remove('hidden');
                          }
                          
                          var themeToggleBtnb = document.getElementById('theme-toggleb');
                          
                          themeToggleBtnb.addEventListener('click', function() {
                          
                            // toggle icons inside button
                            themeToggleDarkIconb.classList.toggle('hidden');
                            themeToggleLightIconb.classList.toggle('hidden');
                          
                            // if set via local storage previously
                            if (localStorage.getItem('color-theme')) {
                                if (localStorage.getItem('color-theme') === 'light') {
                                    document.documentElement.classList.add('dark');
                                    localStorage.setItem('color-theme', 'dark');
                                } else {
                                    document.documentElement.classList.remove('dark');
                                    localStorage.setItem('color-theme', 'light');
                                }
                          
                            // if NOT set via local storage previously
                            } else {
                                if (document.documentElement.classList.contains('dark')) {
                                    document.documentElement.classList.remove('dark');
                                    localStorage.setItem('color-theme', 'light');
                                } else {
                                    document.documentElement.classList.add('dark');
                                    localStorage.setItem('color-theme', 'dark');
                                }
                            }
                            
                          });
                          // It's best to inline this in `head` to avoid FOUC (flash of unstyled content) when changing pages or themes
                          if (
                              localStorage.getItem('color-theme') === 'dark' ||
                              (!('color-theme' in localStorage) &&
                                window.matchMedia('(prefers-color-scheme: dark)').matches)
                            ) {
                              document.documentElement.classList.add('dark');
                            } else {
                              document.documentElement.classList.remove('dark');
                            }
                        </script>
                        <ErrorAlert client:load />

                        <section class="min-h-screen">
                            <div class="flex items-center justify-center m-2">
                                <div class="relative border mt-2 mb-4 border-gray-600 shadow-lg p-8 rounded-lg max-w-md w-full">
                                  <PackagesForm client:load />
                                </div>
                              </div>
                        </section>
      <Footer />
                      </div>
                  </main>
              </div>
          </div>
          <div class="md:hidden overflow-x-hidden h-screen w-screen">
            <div class="antialiased">
                <main class="h-full">
                    <NavigationMenuComponent client:load />
                    <NavigationMenu client:load />
                                            <ErrorAlert client:load />
<section class="min-h-screen">


  </section>
                          <Footer />
                      </div>
                  </main>
              </div>
          </div>
      </body>
      
      </html>