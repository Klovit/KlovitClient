---
import chalk from 'chalk';
import config from '../config';
import { getImage } from 'astro:assets';
import { TITLE,SITE_DESCRIPTION,LOGO } from '../consts';
import { supabase } from "../lib/supabase";
import db from '../database';
import Nav from "../components/nav.astro";
import restype from "../restype"
import Header from "../components/head.astro"
import Resources from '../components/resources.astro';
import Servers from '../components/servers.astro'
import Mobnav from "../components/mobnav.astro";
import { mdiWrapDisabled } from '@mdi/js';
const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");
if (!accessToken || !refreshToken) {
  return redirect("/signin");
}
const refresh_token = refreshToken.value
const access_token = accessToken.value
const { data, error } = await supabase.auth.setSession({
  refresh_token: refresh_token,
  access_token: access_token,
});

if (error) {
  cookies.delete("sb-access-token", {
    path: "/",
  });
  cookies.delete("sb-refresh-token", {
    path: "/",
  });

  return redirect("/signin");
}


const icon = await getImage({src: `${LOGO}`,height: '50', width: '50', format: 'png'})
const errorstate = Astro.url.searchParams.get('error')! || '';
const errormsg = Astro.url.searchParams.get('error')! || '';
const success = Astro.url.searchParams.get('success')! || '';
const successmsg = Astro.url.searchParams.get('success')! || '';

const {
  data: { user },
} = await supabase.auth.getUser()

const metadata = user.user_metadata
const username = metadata.full_name
const email = data?.user?.email
const avatar = metadata.avatar_url

let accountlistjson = await fetch(
    config.pterodactyl.url + "/api/application/users?include=servers&filter[email]=" + encodeURIComponent(email),
    {
        method: "get",
        headers: {
            'Content-Type': 'application/json',
            "Authorization": `Bearer ${config.pterodactyl.api}`
        }
    }
);
              let accountlist = await accountlistjson.json();
              let userdata = accountlist.data.filter(acc => acc.attributes.email == email);
let cacheaccount = await fetch(
config.pterodactyl.url + "/api/application/users/" + userdata[0].attributes.id + "?include=servers",
 {
    method: "get",
    headers: { 'Content-Type': 'application/json', "Authorization": `Bearer ${config.pterodactyl.api}` }
  }
);
if (await cacheaccount.statusText == "Not Found") {
  if (error) {
    console.log(chalk.red(`[KlovitClient] An error has occured on path ${Astro.url.pathname}:`));
  };
};
let cacheaccountinfo = JSON.parse(await cacheaccount.text());
    
const pterodactyl = cacheaccountinfo.attributes;
const adminstatus = pterodactyl.root_admin
const servers = pterodactyl.relationships.servers.data[0]

const year = new Date().getFullYear().toString()
const yearWithTitle = `${year} ${TITLE}`

// RESOURCES
const extraresources = await db.get("extraresources-" + username)
const pkglist = config.packages.list.pkg
const pkg = await db.get(`package-${username}`)
const resconf = restype.restype
// Package Limits
const pkgram = config.packages.list[await db.get("package-" + username)].ram
const pkgdisk = config.packages.list[await db.get("package-" + username)].disk
const pkgserverslimit = config.packages.list[await db.get("package-" + username)].servers
// Actual Limits
let ccore;
ccore = config.packages.list[await db.get("package-" + username)].cpu + extraresources.cpu
ccore += config.resource_type === 'MB' ? '%' : ' Core(s)'
const ramlimit = pkgram + extraresources.ram
const disklimit = pkgdisk + extraresources.disk
const serverslimit = pkgserverslimit + extraresources.servers
// Used resources
let ramused = 0;
let diskused = 0;
let cpuused = 0;
if (config.resource_type ==="GB") {
for (let i = 0, len = pterodactyl.relationships.servers.data.length; i < len; i++) {
    ramused = ramused + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.memory == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.memory : 0)/1024;
    diskused = diskused + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.disk == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.disk : 0)/1024;
    cpuused = cpuused + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.cpu == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.cpu : 0)/100;
}
} else {
    for (let i = 0, len = pterodactyl.relationships.servers.data.length; i < len; i++) {
    ramused = ramused + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.memory == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.memory : 0);
    diskused = diskused + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.disk == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.disk : 0);
    cpuused = cpuused + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.cpu == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.cpu : 0);
}
}


const serversused = pterodactyl.relationships.servers.data.length
let srvs = pterodactyl.relationships.servers.data

let serverram;
let serverdisk;
let servercpu;
if (config.resource_type === "GB"){
    serverram = "%serverram% GB(s)"
    serverdisk = "%serverdisk% GB(s)"
    servercpu = "%servercpu% Core(s)"
} else {
    serverram = "%serverram% MB(s)"
    serverdisk = "%serverdisk% MB(s)"
    servercpu = "%servercpu%%"
    }
const coins = await db.get("balance-" + email)
let storestatus;
if (config.coins.store.enabled || config.coins.enabled) {
        storestatus = true;
     }
     else {
        storestatus = false;
     }

const ram = config.coins.store.ram.per
const disk = config.coins.store.disk.per
const cpu = config.coins.store.cpu.per
const slots = config.coins.store.servers.per
let cputype;
if (config.resource_type === "GB") {
 cputype = " Core(s)"
} else {
 cputype = "%"
}
if (storestatus === false) {
   return Astro.redirect(`/dashboard?error="Store is Disabled."`)
}
---
<!DOCTYPE html>
<html>
    <Header />
<style> 
 @import url('https://fonts.googleapis.com/css2?family=Fredoka:wght@300;400;500&display=swap');
 body { font-family: 'Fredoka', system-ui, sans-serif; }
  body {
     overflow-y: scroll;
     overflow-x: hidden;
  }
</style>

<script>
   // On page load or when changing themes, best to add inline in `head` to avoid FOUC
   if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
      document.documentElement.classList.add('dark');
   } else {
      document.documentElement.classList.remove('dark')
   }
   var themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
   var themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');
                   
    // Change the icons inside the button based on previous settings
    if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
      themeToggleLightIcon.classList.remove('hidden');
    } else {
      themeToggleDarkIcon.classList.remove('hidden');
    }
            
    var themeToggleBtn = document.getElementById('theme-toggle');

    themeToggleBtn.addEventListener('click', function() {

      // toggle icons inside button
      themeToggleDarkIcon.classList.toggle('hidden');
      themeToggleLightIcon.classList.toggle('hidden');

      // if set via local storage previously
      if (localStorage.getItem('color-theme')) {
          if (localStorage.getItem('color-theme') === 'light') {
              document.documentElement.classList.add('dark');
              localStorage.setItem('color-theme', 'dark');
          } else {
              document.documentElement.classList.remove('dark');
              localStorage.setItem('color-theme', 'light');
          }

      // if NOT set via local storage previously
      } else {
          if (document.documentElement.classList.contains('dark')) {
              document.documentElement.classList.remove('dark');
              localStorage.setItem('color-theme', 'light');
          } else {
             document.documentElement.classList.add('dark');
              localStorage.setItem('color-theme', 'dark');
          }
      }
    
    });
    // It's best to inline this in `head` to avoid FOUC (flash of unstyled content) when changing pages or themes
        if (
      localStorage.getItem('color-theme') === 'dark' ||
      (!('color-theme' in localStorage) &&
        window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
</script>
<body class="flex items-center bg-zinc-100 dark:bg-gray-950 justify-center h-screen">
    <div class="hidden md:block bg-zinc-100 dark:bg-gray-950 animation-blob h-screen w-screen">
        <div class="antialiased">
            <main>
                <div class="h-12 w-full">
                    <Nav />
                    {errorstate && <div style="border-radius: 15px; color: white; height: 50px; text-align: center; font-size: large;" style="border-radius: 15px;" class="rounded-xl mb-2 bg-red-700 alert mr-3 ml-3 mt-1">ERROR: {errormsg}</div>}
                    {success && <div style="border-radius: 15px; color: white; height: 50px; text-align: center; font-size: large;" style="border-radius: 15px;" class="rounded-xl mb-1 bg-green-700 alert mr-3 ml-3 mt-1">Success: {success}</div>}
<Resources /><br><br>
<section class="p-8 rounded-xl">
<div class="rounded-xl grid grid-cols-2 bg-white dark:bg-zinc-900/50 dark:bg-zinc-900/50">
  <div class="p-2">
    <form method="POST" action="/api/store/buy/ram">
      <h1 class="dark:text-white">RAM:</h1>
      <select class="bg-zinc-300 dark:bg-zinc-900/50 border border-black w-full dark:text-gray-300 duration-300 p-2 rounded-xl" name="amount">
        <option value={ram}>{config.coins.store.ram.per}{resconf} {config.coins.store.ram.cost}</option>
        <option value={ram * 2}>{config.coins.store.ram.per * 2}{resconf} {config.coins.store.ram.cost * 2}</option>
        <option value={ram * 3}>{config.coins.store.ram.per * 3}{resconf} {config.coins.store.ram.cost * 3}</option>
      </select>
      <button class="text-white w-full relative bg-blue-400 shadow-md font-medium rounded-full text-lg p-2 text-center" type="submit">Buy</button>
    </form>
</div>
  <div class="p-2">
    <form method="POST" action="/api/store/buy/disk">
      <h1 class="dark:text-white">Disk:</h1>
      <select class="bg-zinc-300 dark:bg-zinc-900/50 border border-black w-full dark:text-gray-300 duration-300 p-2 rounded-xl" name="amount">
        <option value={disk}>{config.coins.store.disk.per}{resconf} - {config.coins.store.disk.cost} Coins</option>
        <option value={disk * 2}>{config.coins.store.disk.per * 2}{resconf} - {config.coins.store.disk.cost * 2} Coins</option>
        <option value={disk * 3}>{config.coins.store.disk.per * 3}{resconf} - {config.coins.store.disk.cost * 3} Coins</option>
      </select>
      <button class="text-white w-full relative bg-blue-400 shadow-md font-medium rounded-full text-lg p-2 text-center" type="submit">Buy</button>
    </form>
  </div>
  <div class="p-2">
    <form method="POST" action="/api/store/buy/cpu">
      <h1 class="dark:text-white">CPU:</h1>
      <select class="bg-zinc-300 dark:bg-zinc-900/50 border border-black w-full dark:text-gray-300 duration-300 p-2 rounded-xl" name="amount">
        <option value={cpu}>{config.coins.store.cpu.per}{cputype} - {config.coins.store.cpu.cost} Coins</option>
        <option value={cpu * 2}>{config.coins.store.cpu.per * 2}{cputype} - {config.coins.store.cpu.cost * 2} Coins</option>
        <option value={cpu * 3}>{config.coins.store.cpu.per * 3}{cputype} - {config.coins.store.cpu.cost * 3} Coins</option>
      </select>
      <button class="text-white w-full relative bg-blue-400 shadow-md font-medium rounded-full text-lg p-2 text-center" type="submit">Buy</button>
    </form>
  </div>
  <div class="p-2">
    <form method="POST" action="/api/store/buy/slots">
      <h1 class="dark:text-white">Slots:</h1>
      <select class="bg-zinc-300 dark:bg-zinc-900/50 border border-black w-full dark:text-gray-300 duration-300 p-2 rounded-xl" name="amount">
        <option value={slots}>{config.coins.store.servers.per} - {config.coins.store.servers.cost} Coins</option>
        <option value={slots * 2}>{config.coins.store.servers.per * 2} - {config.coins.store.servers.cost * 2} Coins</option>
        <option value={slots * 3}>{config.coins.store.servers.per * 3} - {config.coins.store.servers.cost * 3} Coins</option>
      </select>
      <button class="text-white w-full relative bg-blue-400 shadow-md font-medium rounded-full text-lg p-2 text-center" type="submit">Buy</button>
    </form>
  </div>
</div>

</section>
                  <div class="text-center">
                    <p class="text-gray-400">
                        &copy;
                        {year} {TITLE} | Powered by <a
                        class="text-amber-500"
                        href="https://github.com/Klovit/KlovitClient">KlovitClient</a>
                </p>
                 </div>
                </div>
            </main>
        </div>
    </div>
    <div class="md:hidden w-screen overflow-x-hidden bg-zinc-100 dark:bg-gray-950 animation-blob h-screen w-screen">

        <div class="antialiased">
            <main>
              <main>
                <div class="h-12 w-full">
                    
<Mobnav />
                    {errorstate && <div style="border-radius: 15px; color: white; height: 50px; text-align: center; font-size: large;" style="border-radius: 15px;" class="rounded-xl mb-2 bg-red-700 alert mr-3 ml-3 mt-1">ERROR: {errormsg}</div>}
                    {success && <div style="border-radius: 15px; color: white; height: 50px; text-align: center; font-size: large;" style="border-radius: 15px;" class="rounded-xl mb-1 bg-green-700 alert mr-3 ml-3 mt-1">Success: {success}</div>}
<Resources /><br><br>
<section>
  <div class="rounded-xl grid grid-cols-2 bg-white dark:bg-zinc-900/50 dark:bg-zinc-900/50">
    <div class="p-2">
      <form method="POST" action="/api/store/buy/ram">
        <h1 class="dark:text-white">RAM:</h1>
        <select class="bg-zinc-300 dark:bg-zinc-900/50 border border-black w-full dark:text-gray-300 duration-300 p-2 rounded-xl" name="amount">
          <option value={ram}>{config.coins.store.ram.per}{resconf} {config.coins.store.ram.cost}</option>
          <option value={ram * 2}>{config.coins.store.ram.per * 2}{resconf} {config.coins.store.ram.cost * 2}</option>
          <option value={ram * 3}>{config.coins.store.ram.per * 3}{resconf} {config.coins.store.ram.cost * 3}</option>
        </select>
        <button class="text-white w-full relative bg-blue-400 shadow-md font-medium rounded-full text-lg p-2 text-center" type="submit">Buy</button>
      </form>
  </div>
    <div class="p-2">
      <form method="POST" action="/api/store/buy/disk">
        <h1 class="dark:text-white">Disk:</h1>
        <select class="bg-zinc-300 dark:bg-zinc-900/50 border border-black w-full dark:text-gray-300 duration-300 p-2 rounded-xl" name="amount">
          <option value={disk}>{config.coins.store.disk.per}{resconf} - {config.coins.store.disk.cost} Coins</option>
          <option value={disk * 2}>{config.coins.store.disk.per * 2}{resconf} - {config.coins.store.disk.cost * 2} Coins</option>
          <option value={disk * 3}>{config.coins.store.disk.per * 3}{resconf} - {config.coins.store.disk.cost * 3} Coins</option>
        </select>
        <button class="text-white w-full relative bg-blue-400 shadow-md font-medium rounded-full text-lg p-2 text-center" type="submit">Buy</button>
      </form>
    </div>
    <div class="p-2">
      <form method="POST" action="/api/store/buy/cpu">
        <h1 class="dark:text-white">CPU:</h1>
        <select class="bg-zinc-300 dark:bg-zinc-900/50 border border-black w-full dark:text-gray-300 duration-300 p-2 rounded-xl" name="amount">
          <option value={cpu}>{config.coins.store.cpu.per}{cputype} - {config.coins.store.cpu.cost} Coins</option>
          <option value={cpu * 2}>{config.coins.store.cpu.per * 2}{cputype} - {config.coins.store.cpu.cost * 2} Coins</option>
          <option value={cpu * 3}>{config.coins.store.cpu.per * 3}{cputype} - {config.coins.store.cpu.cost * 3} Coins</option>
        </select>
        <button class="text-white w-full relative bg-blue-400 shadow-md font-medium rounded-full text-lg p-2 text-center" type="submit">Buy</button>
      </form>
    </div>
    <div class="p-2">
      <form method="POST" action="/api/store/buy/slots">
        <h1 class="dark:text-white">Slots:</h1>
        <select class="bg-zinc-300 dark:bg-zinc-900/50 border border-black w-full dark:text-gray-300 duration-300 p-2 rounded-xl" name="amount">
          <option value={slots}>{config.coins.store.servers.per} - {config.coins.store.servers.cost} Coins</option>
          <option value={slots * 2}>{config.coins.store.servers.per * 2} - {config.coins.store.servers.cost * 2} Coins</option>
          <option value={slots * 3}>{config.coins.store.servers.per * 3} - {config.coins.store.servers.cost * 3} Coins</option>
        </select>
        <button class="text-white w-full relative bg-blue-400 shadow-md font-medium rounded-full text-lg p-2 text-center" type="submit">Buy</button>
      </form>
    </div>
  </div>
  
</section>
                  <div class="text-center">
                    <p class="text-gray-400">
                        &copy;
                        {year} {TITLE} | Powered by <a
                        class="text-amber-500"
                        href="https://github.com/Klovit/KlovitClient">KlovitClient</a>
                </p>

                 </div>
                </div>
            </main>
        </div>
    </div>
</body>

</html>