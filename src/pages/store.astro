---
import chalk from 'chalk';
import config from '../config';
import '../styles/globals.css'


import { supabase } from "../lib/supabase";
import db from '../database';
import Nav from "../components/nav.astro";
import restype from "../restype"
import Header from "../components/head.astro"
import Resources from '../components/resources.astro';
import Footer from '../components/footer.astro'
import Servers from '../components/servers.astro'
import Mobnav from "../components/mobnav.astro";
const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");
if (!accessToken || !refreshToken) {
  return redirect("/signin");
}
const refresh_token = refreshToken.value
const access_token = accessToken.value
const { data, error } = await supabase.auth.setSession({
  refresh_token: refresh_token,
  access_token: access_token,
});

if (error) {
  cookies.delete("sb-access-token", {
    path: "/",
  });
  cookies.delete("sb-refresh-token", {
    path: "/",
  });

  return redirect("/signin");
}


const errorstate = Astro.url.searchParams.get('error')! || '';
const errormsg = Astro.url.searchParams.get('error')! || '';
const success = Astro.url.searchParams.get('success')! || '';
const successmsg = Astro.url.searchParams.get('success')! || '';

const {
  data: { user },
} = await supabase.auth.getUser()

const metadata = user.user_metadata
const username = metadata.full_name
const email = data?.user?.email
const avatar = metadata.avatar_url

let accountlistjson = await fetch(
    config.pterodactyl.url + "/api/application/users?include=servers&filter[email]=" + encodeURIComponent(email),
    {
        method: "get",
        headers: {
            'Content-Type': 'application/json',
            "Authorization": `Bearer ${config.pterodactyl.api}`
        }
    }
);
              let accountlist = await accountlistjson.json();
              let userdata = accountlist.data.filter(acc => acc.attributes.email == email);
let cacheaccount = await fetch(
config.pterodactyl.url + "/api/application/users/" + userdata[0].attributes.id + "?include=servers",
 {
    method: "get",
    headers: { 'Content-Type': 'application/json', "Authorization": `Bearer ${config.pterodactyl.api}` }
  }
);
if (await cacheaccount.statusText == "Not Found") {
  if (error) {
    console.log(chalk.red(`[KlovitClient] An error has occured on path ${Astro.url.pathname}:`));
  };
};
let cacheaccountinfo = JSON.parse(await cacheaccount.text());
    
const pterodactyl = cacheaccountinfo.attributes;
const adminstatus = pterodactyl.root_admin
const servers = pterodactyl.relationships.servers.data[0]

const year = new Date().getFullYear().toString()
const yearWithTitle = `${year} ${config.name}`

// RESOURCES
const info = await db.get("user-" + email)
const pkglist = config.packages.list.pkg
const pkg = info.package
const resconf = restype.restype
// Package Limits
const pkgram = config.packages.list[info.package].ram
const pkgdisk = config.packages.list[info.package].disk
const pkgserverslimit = config.packages.list[info.package].servers
// Actual Limits
let ccore;
ccore = config.packages.list[info.package].cpu + info.extraresources.cpu
ccore += config.resource_type === 'MB' ? '%' : ' Core(s)'
const ramlimit = pkgram + info.extraresources.ram
const disklimit = pkgdisk + info.extraresources.disk
const serverslimit = pkgserverslimit + info.extraresources.servers
// Used resources
let ramused = 0;
let diskused = 0;
let cpuused = 0;
if (config.resource_type ==="GB") {
for (let i = 0, len = pterodactyl.relationships.servers.data.length; i < len; i++) {
    ramused = ramused + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.memory == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.memory : 0)/1024;
    diskused = diskused + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.disk == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.disk : 0)/1024;
    cpuused = cpuused + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.cpu == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.cpu : 0)/100;
}
} else {
    for (let i = 0, len = pterodactyl.relationships.servers.data.length; i < len; i++) {
    ramused = ramused + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.memory == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.memory : 0);
    diskused = diskused + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.disk == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.disk : 0);
    cpuused = cpuused + (typeof pterodactyl.relationships.servers.data[i].attributes.limits.cpu == "number" ? pterodactyl.relationships.servers.data[i].attributes.limits.cpu : 0);
}
}


const serversused = pterodactyl.relationships.servers.data.length
let srvs = pterodactyl.relationships.servers.data

let serverram;
let serverdisk;
let servercpu;
if (config.resource_type === "GB"){
    serverram = "%serverram% GB(s)"
    serverdisk = "%serverdisk% GB(s)"
    servercpu = "%servercpu% Core(s)"
} else {
    serverram = "%serverram% MB(s)"
    serverdisk = "%serverdisk% MB(s)"
    servercpu = "%servercpu%%"
    }
let storestatus;
if (config.coins.store.enabled && config.coins.enabled) {
        storestatus = true;
     }
     else {
        storestatus = false;
     }
const ram = config.coins.store.ram.per
const disk = config.coins.store.disk.per
const cpu = config.coins.store.cpu.per
const slots = config.coins.store.servers.per
let cputype;
if (config.resource_type === "GB") {
 cputype = " Core(s)"
} else {
 cputype = "%"
}
if (storestatus === false) {
   return Astro.redirect(`/dashboard?error=Store is Disabled.`)
}
let providerenabled;
if (config.payments.enabled && config.payments.gateways.stripe.enabled) {
  providerenabled = true;
} else {
  providerenabled = false;
}
const stripecoinsph = `Amount of coins, 1 coin is ${config.coins.store.coins.cost/config.coins.store.coins.per} ${config.payments.currency}`
const stripepk = config.payments.gateways.stripe.pkkey
---
<!DOCTYPE html>
<html>
    <Header />

<body class="bg-gradient-to-r from-teal-300 via-blue-400 to-purple-300 dark:bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] dark:from-zinc-700 dark:via-zinc-900 dark:to-black h-full min-h-screen relative">
    <div class="hidden md:block animation-blob w-screen">
        <div class="antialiased">
            <main class="h-full">
                    <Nav />
                    {errorstate && <div style="border-radius: 15px; color: white; height: 50px; text-align: center; font-size: large;" style="border-radius: 15px;" class="rounded-xl mb-2 bg-red-700 alert mr-3 ml-3 mt-8">ERROR: {errormsg}</div>}
                    {success && <div style="border-radius: 15px; color: white; height: 50px; text-align: center; font-size: large;" style="border-radius: 15px;" class="rounded-xl mb-1 bg-green-700 alert mr-3 ml-3 mt-8">Success: {success}</div>}
<Resources />
<section class="p-8 rounded-xl">
  <div class="rounded-xl grid grid-cols-2 bg-gradient-to-r from-teal-300 via-blue-400 to-purple-300 dark:bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] dark:from-zinc-700 dark:via-zinc-900 dark:to-black">
    <div class="p-2">
      <form method="POST" action="/api/store/buy/ram">
        <h1 class="dark:text-white text-black">RAM:</h1>
        <select class="mb-2 w-full dark:bg-zinc-900 dark:text-white duration-300 p-2 rounded-xl" name="amount">
          <option value={ram}>{config.coins.store.ram.per}{resconf} {config.coins.store.ram.cost}</option>
          <option value={ram * 2}>{config.coins.store.ram.per * 2}{resconf} {config.coins.store.ram.cost * 2}</option>
          <option value={ram * 3}>{config.coins.store.ram.per * 3}{resconf} {config.coins.store.ram.cost * 3}</option>
        </select>
        <button class="m-2 w-full rounded-lg text-black dark:text-white bg-gradient-to-r from-teal-300 via-blue-400 to-purple-300 dark:bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] dark:from-zinc-700 dark:via-zinc-900 dark:to-black 
" type="submit">Buy</button>
      </form>
  </div>
    <div class="p-2">
      <form method="POST" action="/api/store/buy/disk">
        <h1 class="dark:text-white text-black">Disk:</h1>
        <select class="mb-2 w-full dark:bg-zinc-900 dark:text-white duration-300 p-2 rounded-xl" name="amount">
          <option value={disk}>{config.coins.store.disk.per}{resconf} - {config.coins.store.disk.cost} Coins</option>
          <option value={disk * 2}>{config.coins.store.disk.per * 2}{resconf} - {config.coins.store.disk.cost * 2} Coins</option>
          <option value={disk * 3}>{config.coins.store.disk.per * 3}{resconf} - {config.coins.store.disk.cost * 3} Coins</option>
        </select>
        <button class="m-2 w-full rounded-lg text-black dark:text-white bg-gradient-to-r from-teal-300 via-blue-400 to-purple-300 dark:bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] dark:from-zinc-700 dark:via-zinc-900 dark:to-black 
" type="submit">Buy</button>
      </form>
    </div>
    <div class="p-2">
      <form method="POST" action="/api/store/buy/cpu">
        <h1 class="dark:text-white text-black">CPU:</h1>
        <select class="mb-2 w-full dark:bg-zinc-900 dark:text-white duration-300 p-2 rounded-xl" name="amount">
          <option value={cpu}>{config.coins.store.cpu.per}{cputype} - {config.coins.store.cpu.cost} Coins</option>
          <option value={cpu * 2}>{config.coins.store.cpu.per * 2}{cputype} - {config.coins.store.cpu.cost * 2} Coins</option>
          <option value={cpu * 3}>{config.coins.store.cpu.per * 3}{cputype} - {config.coins.store.cpu.cost * 3} Coins</option>
        </select>
        <button class="m-2 w-full rounded-lg text-black dark:text-white bg-gradient-to-r from-teal-300 via-blue-400 to-purple-300 dark:bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] dark:from-zinc-700 dark:via-zinc-900 dark:to-black 
" type="submit">Buy</button>
      </form>
    </div>
    <div class="p-2">
      <form method="POST" action="/api/store/buy/slots">
        <h1 class="dark:text-white text-black">Slots:</h1>
        <select class="mb-2 w-full dark:bg-zinc-900 dark:text-white duration-300 p-2 rounded-xl" name="amount">
          <option value={slots}>{config.coins.store.servers.per} - {config.coins.store.servers.cost} Coins</option>
          <option value={slots * 2}>{config.coins.store.servers.per * 2} - {config.coins.store.servers.cost * 2} Coins</option>
          <option value={slots * 3}>{config.coins.store.servers.per * 3} - {config.coins.store.servers.cost * 3} Coins</option>
        </select>
        <button class="m-2 w-full rounded-lg text-black dark:text-white bg-gradient-to-r from-teal-300 via-blue-400 to-purple-300 dark:bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] dark:from-zinc-700 dark:via-zinc-900 dark:to-black 
" type="submit">Buy</button>
      </form>
    </div>
    {providerenabled && <div class="p-2">
      <form id="coins-payment">
        <h1 class="dark:text-white text-black">Coins:</h1>
        <input class="mb-2 w-full dark:bg-zinc-900 dark:text-white duration-300 p-2 rounded-xl" name="coins" placeholder={stripecoinsph} min="100" required type="number"></input>
        <div class="form-group">
                <label for="card-element" class="text-black dark:text-white mt-2">Credit or Debit Card</label>
                <div id="card-element" class="text-black bg-white rounded-xl dark:text-white"></div>
                <div class="error text-black dark:text-white" id="card-errors"></div>
            </div>
        <button class="m-2 w-full rounded-lg text-black dark:text-white bg-gradient-to-r from-teal-300 via-blue-400 to-purple-300 dark:bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] dark:from-zinc-700 dark:via-zinc-900 dark:to-black 
" type="submit">Buy</button>
      </form>
      <script src="https://js.stripe.com/v3/" is:inline></script>
<script define:vars={{ email, stripepk }} is:inline>
  const stripe = Stripe(stripepk); // Replace with your Stripe publishable key
  const elements = stripe.elements();

  // Create an instance of the card Element
  const card = elements.create('card', {
            style: {
                base: {
                    color: '#000', // Default text color for light mode
                    fontSize: '16px',
                    '::placeholder': {
                        color: '#888', // Placeholder color
                    },
                },
                dark: {
                    base: {
                        color: '#fff', // Text color for dark mode
                        '::placeholder': {
                            color: '#aaa', // Placeholder color in dark mode
                        },
                    },
                },
                invalid: {
                    color: '#fa755a', // Color for invalid inputs
                }
            }
        });
  card.mount('#card-element');
  const amount = document.querySelector('input[name="coins"]').value;

  const form = document.getElementById('coins-payment');
  form.addEventListener('submit', async (event) => {
    event.preventDefault();

    const { paymentMethod, error } = await stripe.createPaymentMethod({
      type: 'card',
      card: card,
    });

    if (error) {
      console.error(error);
    } else {
      // Send paymentMethod.id to your server for the purchase
      fetch('/purchase-package', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: email, // Replace with your user ID
          paymentMethodId: paymentMethod.id,
          amount: amount,
        }),
      })
        .then((response) => response.json())
        .then((data) => {
          console.log('Purchase successful:', data);
        })
        .catch((error) => {
          console.error('Error:', error);
        });
    }
  });
</script>
  </div>}
  </div>
  
  </section>
<Footer />
            </main>
        </div>
    </div>
    <div class="md:hidden w-screen overflow-x-hidden animation-blob h-screen">
        <div class="antialiased">
<main class="h-screen">
<Mobnav />
                    {errorstate && <div style="border-radius: 15px; color: white; height: 50px; text-align: center; font-size: large;" style="border-radius: 15px;" class="rounded-xl mb-2 bg-red-700 alert mr-3 ml-3 mt-8">ERROR: {errormsg}</div>}
                    {success && <div style="border-radius: 15px; color: white; height: 50px; text-align: center; font-size: large;" style="border-radius: 15px;" class="rounded-xl mb-1 bg-green-700 alert mr-3 ml-3 mt-8">Success: {success}</div>}
<Resources /><br><br>
<section>
  <div class="rounded-xl grid grid-cols-2 bg-zinc-300 dark:bg-zinc-900/50">
    <div class="p-2">
      <form method="POST" action="/api/store/buy/ram">
        <h1 class="dark:text-white text-black">RAM:</h1>
        <select class="bg-zinc-100 dark:bg-zinc-900/50 border mb-2 border-black w-full dark:text-white duration-300 p-2 rounded-xl" name="amount">
          <option value={ram}>{config.coins.store.ram.per}{resconf} {config.coins.store.ram.cost}</option>
          <option value={ram * 2}>{config.coins.store.ram.per * 2}{resconf} {config.coins.store.ram.cost * 2}</option>
          <option value={ram * 3}>{config.coins.store.ram.per * 3}{resconf} {config.coins.store.ram.cost * 3}</option>
        </select>
        <button class="m-2 w-full rounded-lg text-black dark:text-white bg-gradient-to-r from-teal-300 via-blue-400 to-purple-300 dark:bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] dark:from-zinc-700 dark:via-zinc-900 dark:to-black 
" type="submit">Buy</button>
      </form>
  </div>
    <div class="p-2">
      <form method="POST" action="/api/store/buy/disk">
        <h1 class="dark:text-white text-black">Disk:</h1>
        <select class="bg-zinc-100 dark:bg-zinc-900/50 border mb-2 border-black w-full dark:text-white duration-300 p-2 rounded-xl" name="amount">
          <option value={disk}>{config.coins.store.disk.per}{resconf} - {config.coins.store.disk.cost} Coins</option>
          <option value={disk * 2}>{config.coins.store.disk.per * 2}{resconf} - {config.coins.store.disk.cost * 2} Coins</option>
          <option value={disk * 3}>{config.coins.store.disk.per * 3}{resconf} - {config.coins.store.disk.cost * 3} Coins</option>
        </select>
        <button class="m-2 w-full rounded-lg text-black dark:text-white bg-gradient-to-r from-teal-300 via-blue-400 to-purple-300 dark:bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] dark:from-zinc-700 dark:via-zinc-900 dark:to-black 
" type="submit">Buy</button>
      </form>
    </div>
    <div class="p-2">
      <form method="POST" action="/api/store/buy/cpu">
        <h1 class="dark:text-white text-black">CPU:</h1>
        <select class="bg-zinc-100 dark:bg-zinc-900/50 border mb-2 border-black w-full dark:text-white duration-300 p-2 rounded-xl" name="amount">
          <option value={cpu}>{config.coins.store.cpu.per}{cputype} - {config.coins.store.cpu.cost} Coins</option>
          <option value={cpu * 2}>{config.coins.store.cpu.per * 2}{cputype} - {config.coins.store.cpu.cost * 2} Coins</option>
          <option value={cpu * 3}>{config.coins.store.cpu.per * 3}{cputype} - {config.coins.store.cpu.cost * 3} Coins</option>
        </select>
        <button class="m-2 w-full rounded-lg text-black dark:text-white bg-gradient-to-r from-teal-300 via-blue-400 to-purple-300 dark:bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] dark:from-zinc-700 dark:via-zinc-900 dark:to-black 
" type="submit">Buy</button>
      </form>
    </div>
    <div class="p-2">
      <form method="POST" action="/api/store/buy/slots">
        <h1 class="dark:text-white text-black">Slots:</h1>
        <select class="bg-zinc-100 dark:bg-zinc-900/50 border mb-2 border-black w-full dark:text-white duration-300 p-2 rounded-xl" name="amount">
          <option value={slots}>{config.coins.store.servers.per} - {config.coins.store.servers.cost} Coins</option>
          <option value={slots * 2}>{config.coins.store.servers.per * 2} - {config.coins.store.servers.cost * 2} Coins</option>
          <option value={slots * 3}>{config.coins.store.servers.per * 3} - {config.coins.store.servers.cost * 3} Coins</option>
        </select>
        <button class="m-2 w-full rounded-lg text-black dark:text-white bg-gradient-to-r from-teal-300 via-blue-400 to-purple-300 dark:bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] dark:from-zinc-700 dark:via-zinc-900 dark:to-black 
" type="submit">Buy</button>
      </form>
    </div>
  </div>
  
</section>
                  <div class="text-center">
                    <p class="text-gray-400">
                        &copy;
                        {year} {config.name} | Powered by <a
                        class="text-amber-500"
                        href="https://github.com/Klovit/KlovitClient">KlovitClient</a>
                </p>

                 </div>
                </div>
            </main>
        </div>
    </div>
</body>

</html>