---
import chalk from 'chalk';
import config from '../../../config';
import { supabase } from "../../../lib/supabase";
import db from '../../../database';
import Nav from "../../../components/nav.astro";
import restype from "../../../restype"
import Header from "../../../components/head.astro"
import Resources from '../../../components/resources.astro';
import Footer from '../../../components/footer.astro'
import Servers from '../../../components/servers.astro'
import Mobnav from "../../../components/mobnav.astro";
import { pterosocket } from 'pterosocket';
import { GET } from 'src/pages/api/auth/callback';

const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");
if (!accessToken || !refreshToken) {
  return redirect("/signin");
}
const { data, error } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});
if (error) {
  cookies.delete("sb-access-token", {
    path: "/",
  });
  cookies.delete("sb-refresh-token", {
    path: "/",
  });

  return redirect("/signin");
}
const resconf = restype.restype
const errorstate = Astro.url.searchParams.get('error')! || '';
const errormsg = Astro.url.searchParams.get('error')! || '';
const success = Astro.url.searchParams.get('success')! || '';
const srvid = Astro.url.searchParams.get('id')! || '';

const year = new Date().getFullYear().toString()
const yearWithTitle = `${year} ${config.name}`

const limitint = Astro.url.searchParams.get('limit')! || ''
let limit;
if (Astro.url.searchParams.get("limit")){ limit = "Limit is " + limitint + ` ${resconf}`;
}
const {
  data: { user },
} = await supabase.auth.getUser()
const metadata = user.user_metadata
const username = metadata.full_name
const email = data?.user?.email
const avatar = metadata.avatar_url

let accountlistjson = await fetch(
    config.pterodactyl.url + "/api/application/users?include=servers&filter[email]=" + encodeURIComponent(email),
    {
        method: "get",
        headers: {
            'Content-Type': 'application/json',
            "Authorization": `Bearer ${config.pterodactyl.api}`
        }
    });
              let accountlist = await accountlistjson.json();
              let userdata = accountlist.data.filter(acc => acc.attributes.email == email);

let cacheaccount = await fetch(config.pterodactyl.url + "/api/application/users/" + userdata[0].attributes.id + "?include=servers",
 {
  method: "get",
  headers: { 'Content-Type': 'application/json', "Authorization": `Bearer ${config.pterodactyl.api}` }
 });
if (await cacheaccount.statusText == "Not Found") {
  if (error) {
    console.log(chalk.red(`[KlovitClient] An error has occured on path ${Astro.url.pathname}:`));
  };};
let cacheaccountinfo = JSON.parse(await cacheaccount.text());
const pterodactyl = cacheaccountinfo.attributes;

if (pterodactyl.relationships.servers.data.filter(server => server.attributes.id == srvid).length == 0) return redirect("/dashboard?error=Could not find server with that ID.")

const srvinfo = pterodactyl.relationships.servers.data.filter(server => server.attributes.id == srvid)

const origin = config.pterodactyl.url;
const api_key = config.pterodactyl.client_api;
const server_uuid = srvinfo[0].attributes.uuid;

  const socket = new pterosocket(origin, api_key, server_uuid);

  socket.on("start", () => {
      console.log("Connected!");
  });
  let consoleoutput;
  socket.on('console_output', (output)=>{
    consoleoutput = output;
})
---
<!DOCTYPE html>
<html>
    <Header />
    <style> 
      @import url('https://fonts.googleapis.com/css2?family=Fredoka:wght@300;400;500&display=swap');
      body { font-family: 'Fredoka', system-ui, sans-serif; }
       body {
          overflow-y: scroll;
          overflow-x: hidden;
       }
       @tailwind base;
  @tailwind components;
  @tailwind utilities;
     </style>

<script is:inline>
   // On page load or when changing themes, best to add inline in `head` to avoid FOUC
   if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
      document.documentElement.classList.add('dark');
   } else {
      document.documentElement.classList.remove('dark')
   }
   var themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
   var themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');
                   
    // Change the icons inside the button based on previous settings
    if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
      themeToggleLightIcon.classList.remove('hidden');
    } else {
      themeToggleDarkIcon.classList.remove('hidden');
    }
            
    var themeToggleBtn = document.getElementById('theme-toggle');

    themeToggleBtn.addEventListener('click', function() {

      // toggle icons inside button
      themeToggleDarkIcon.classList.toggle('hidden');
      themeToggleLightIcon.classList.toggle('hidden');

      // if set via local storage previously
      if (localStorage.getItem('color-theme')) {
          if (localStorage.getItem('color-theme') === 'light') {
              document.documentElement.classList.add('dark');
              localStorage.setItem('color-theme', 'dark');
          } else {
              document.documentElement.classList.remove('dark');
              localStorage.setItem('color-theme', 'light');
          }

      // if NOT set via local storage previously
      } else {
          if (document.documentElement.classList.contains('dark')) {
              document.documentElement.classList.remove('dark');
              localStorage.setItem('color-theme', 'light');
          } else {
             document.documentElement.classList.add('dark');
              localStorage.setItem('color-theme', 'dark');
          }
      }
    
    });
    // It's best to inline this in `head` to avoid FOUC (flash of unstyled content) when changing pages or themes
        if (
      localStorage.getItem('color-theme') === 'dark' ||
      (!('color-theme' in localStorage) &&
        window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
</script>
<body class="bg-gradient-to-r from-teal-300 via-blue-400 to-purple-300 dark:bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] dark:from-zinc-700 dark:via-zinc-900 dark:to-black flex items-center justify-center h-screen">
    <div class="hidden md:block animation-blob h-screen w-screen">
        <div class="antialiased">
            <main>
                <div class="h-12 w-full">
                    <Nav />
                    {errorstate && <div style="border-radius: 15px; color: white; height: 50px; text-align: center; font-size: large;" style="border-radius: 15px;" class="rounded-xl mb-2 bg-red-700 alert mr-3 ml-3 mt-1">ERROR: {errormsg} {limit}</div>}
                    {success && <div style="border-radius: 15px; color: white; height: 50px; text-align: center; font-size: large;" style="border-radius: 15px;" class="rounded-xl mb-1 bg-green-700 alert mr-3 ml-3 mt-1">Success: {success}</div>}
<section class="flex justify-center">
<p>{consoleoutput}</p>


</section>
<Footer />
                </div>
            </main>
        </div>
    </div>
    <div class="md:hidden w-screen overflow-x-hidden animation-blob h-screen">

        <div class="antialiased">
            <main>
<Mobnav />
                    {errorstate && <div style="border-radius: 15px; color: white; height: 50px; text-align: center; font-size: large;" style="border-radius: 15px;" class="rounded-xl mb-2 bg-red-700 alert mr-3 ml-3 mt-1">ERROR: {errormsg} {limit}</div>}
                    {success && <div style="border-radius: 15px; color: white; height: 50px; text-align: center; font-size: large;" style="border-radius: 15px;" class="rounded-xl mb-1 bg-green-700 alert mr-3 ml-3 mt-1">Success: {success}</div>}
<section class="flex justify-center">

    </section>
<Footer />
                </div>
            </main>
        </div>
    </div>
</body>

</html>